from bot_instance import bot
from telebot import types
import time
import json
import random
import re
import logging
from text import about, ai, help, policy, devs, commands

# –ï—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, –∑–∞–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
blacklist = []  # –ù–∞–ø—Ä–∏–º–µ—Ä: [123456789, 987654321]

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –û–±—â–∏–µ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ (rate limiting)
user_timers = {}
user_timers_top = {}

BOOKS = [
    {"title": "–Ø–Ω–≤–∞—Ä—å—Å–∫–∏–π –≤—ã–ø—É—Å–∫ –≥–∞–∑–µ—Ç—ã - 2025", "message_id": 46},
    {"title": "–ê–ª–≥–µ–±—Ä–∞ 10 –∫–ª–∞—Å—Å. –†–£", "message_id": 9},
    {"title": "–ë–∏–æ–ª–æ–≥–∏—è 10 –∫–ª–∞—Å—Å. –†–£", "message_id": 10},
    {"title": "–û–ì–ü 10 –∫–ª–∞—Å—Å. –†–£", "message_id": 11},
    {"title": "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è 10 –∫–ª–∞—Å—Å. –†–£", "message_id": 13},
    {"title": "–ì–µ–æ–º–µ—Ç—Ä–∏—è 10 –∫–ª–∞—Å—Å. –†–£", "message_id": 14},
    {"title": "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ 10 –∫–ª–∞—Å—Å. –†–£", "message_id": 15},
    {"title": "–í—Å–µ–º–∏—Ä–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è 10 –∫–ª–∞—Å—Å. –†–£", "message_id": 16},
    {"title": "–•–∏–º–∏—è 10 –∫–ª–∞—Å—Å. –†–£", "message_id": 17},
    {"title": "–£–∑–±–µ–∫—Å–∫–∏–π —è–∑—ã–∫ 10 –∫–ª–∞—Å—Å. –†–£", "message_id": 18},
    {"title": "–ò—Å—Ç–æ—Ä–∏—è –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞ 10 –∫–ª–∞—Å—Å. –†–£", "message_id": 19},
    {"title": "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ 10 –∫–ª–∞—Å—Å. –†–£", "message_id": 20},
    {"title": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ —á–∞—Å—Ç—å 1 - 11 –ö–ª–∞—Å—Å. –†–£", "message_id": 22},
    {"title": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ —á–∞—Å—Ç—å 2 - 11 –ö–ª–∞—Å—Å. –†–£", "message_id": 23},
    {"title": "–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è - 11 –ö–ª–∞—Å—Å. –†–£", "message_id": 24},
    {"title": "–ë–∏–æ–ª–æ–≥–∏—è - 11 –ö–ª–∞—Å—Å. –†–£", "message_id": 26},
    {"title": "–û–ì–ü - 11 –ö–ª–∞—Å—Å. –†–£", "message_id": 27},
    {"title": "–§–∏–∑–∏–∫–∞ - 11 –ö–ª–∞—Å—Å. –†–£", "message_id": 28},
    {"title": "–í—Å–µ–º–∏—Ä–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è - 11 –ö–ª–∞—Å—Å. –†–£", "message_id": 29},
    {"title": "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ —á–∞—Å—Ç—å 1 - 11 –ö–ª–∞—Å—Å. –†–£", "message_id": 30},
    {"title": "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ —á–∞—Å—Ç—å 2 - 11 –ö–ª–∞—Å—Å. –†–£", "message_id": 31},
    {"title": "–£–∑–±–µ–∫—Å–∫–∏–π —è–∑—ã–∫ - 11 –ö–ª–∞—Å—Å. –†–£", "message_id": 32},
    {"title": "–ò—Å—Ç–æ—Ä–∏—è –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞ - 11 –ö–ª–∞—Å—Å. –†–£", "message_id": 33},
    {"title": "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ - 11 –ö–ª–∞—Å—Å. –†–£", "message_id": 34},
    {"title": "–û—Å–Ω–æ–≤—ã –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–∞ - 11 –ö–ª–∞—Å—Å. –†–£", "message_id": 35},
    {"title": "–°–∞–º–∞—Ä–∫–∞–Ω–¥—Å–∫–∏–π –≤–µ—Å—Ç–Ω–∏–∫", "message_id": 37},
    {"title": "–í–µ—Å—Ç–Ω–∏–∫ üìï —á–∞—Å—Ç—å 1", "message_id": 38},
    {"title": "–í–µ—Å—Ç–Ω–∏–∫ üìï —á–∞—Å—Ç—å 2", "message_id": 39},
    {"title": "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ - 11 –∫–ª–∞—Å—Å. –†–£", "message_id": 44},
]
CHANNEL_ID = -1002302327144  # –£–∫–∞–∂–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞, –æ—Ç–∫—É–¥–∞ –ø–µ—Ä–µ—Å—ã–ª–∞—é—Ç—Å—è –∫–Ω–∏–≥–∏


def get_books_markup(page=0, per_page=9):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–∏–≥–∞–º–∏.
    –ö–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –ø–æ –æ–¥–Ω–æ–π –≤ —Å—Ç—Ä–æ–∫–µ.
    –í –∫–æ–Ω—Ü–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    markup = types.InlineKeyboardMarkup(row_width=1)
    start = page * per_page
    end = start + per_page
    books_on_page = BOOKS[start:end]
    for book in books_on_page:
        markup.add(types.InlineKeyboardButton(book["title"], callback_data=f"book_{book['message_id']}"))

    # –ï—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ ‚Äì –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if page > 0:
        markup.add(types.InlineKeyboardButton("<<<<<", callback_data=f"prev_{page - 1}"))
    if end < len(BOOKS):
        markup.add(types.InlineKeyboardButton(">>>>>", callback_data=f"next_{page + 1}"))

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu_lib"))
    return markup


@bot.callback_query_handler(func=lambda call: call.data.startswith("book_"))
def send_book(call):
    """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–Ω–∏–≥—É (—Å–æ–æ–±—â–µ–Ω–∏–µ) –∏–∑ –∫–∞–Ω–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    try:
        message_id = int(call.data.split("_")[1])
        bot.forward_message(call.from_user.id, CHANNEL_ID, message_id)
    except Exception as e:
        bot.send_message(call.from_user.id, f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {e}")


@bot.callback_query_handler(func=lambda call: call.data.startswith("next_"))
def next_page(call):
    """–õ–∏—Å—Ç–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–ø–µ—Ä–µ–¥."""
    page = int(call.data.split("_")[1])
    bot.edit_message_reply_markup(call.message.chat.id,
                                  call.message.message_id,
                                  reply_markup=get_books_markup(page))


@bot.callback_query_handler(func=lambda call: call.data.startswith("prev_"))
def prev_page(call):
    """–õ–∏—Å—Ç–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞–∑–∞–¥."""
    page = int(call.data.split("_")[1])
    bot.edit_message_reply_markup(call.message.chat.id,
                                  call.message.message_id,
                                  reply_markup=get_books_markup(page))


@bot.callback_query_handler(func=lambda call: call.data == "back_to_menu_lib")
def back_to_menu_lib(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥' –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    try:
        chat_id = call.message.chat.id
        bot.delete_message(chat_id, call.message.message_id)
        bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: {e}")


# ================== –ú–û–î–£–õ–¨ "–ü–û–•–í–ê–õ–ò –ú–ï–ù–Ø" ==================
# –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ –≤–∞—à–µ–º—É –∏—Å—Ö–æ–¥–Ω–∏–∫—É
def escape_markdown(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2."""
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(r'([%s])' % re.escape(escape_chars), r'\\\1', text)


def get_random_praise(exclude=None):
    try:
        with open("praise.txt", "r", encoding="utf-8") as file:
            praises = [line.strip() for line in file.readlines() if line.strip()]
        if not praises:
            logging.warning("–§–∞–π–ª praise.txt –ø—É—Å—Ç!")
            return "–¢—ã –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π!"
        exclude = exclude.strip() if exclude else None
        if exclude and exclude in praises:
            praises.remove(exclude)
        return random.choice(praises) if praises else "–¢—ã –≤–µ–ª–∏–∫–æ–ª–µ–ø–µ–Ω!"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Ö–≤–∞–ª: {e}")
        return "–¢—ã –∫—Ä—É—Ç–æ–π!"


@bot.message_handler(commands=['praise'])
def send_praise(message):
    if message.from_user.id in blacklist:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–Ω–µ
    user_id = message.from_user.id
    current_time = time.time()
    if user_id in user_timers and current_time - user_timers[user_id] < 10:
        return  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã
    user_timers[user_id] = current_time
    praise_text = get_random_praise()
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü–æ—Ö–≤–∞–ª–∏ –º–µ–Ω—è", callback_data="new_praise"))
    bot.send_message(message.chat.id, escape_markdown(praise_text), reply_markup=markup, parse_mode="MarkdownV2")


@bot.callback_query_handler(func=lambda call: call.data == "new_praise")
def update_praise(call):
    bot.answer_callback_query(call.id)  # –£–±–∏—Ä–∞–µ–º "‚åõ –û–∂–∏–¥–∞–Ω–∏–µ..."
    current_text = call.message.text.strip()
    new_praise = get_random_praise(exclude=current_text)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü–æ—Ö–≤–∞–ª–∏ –º–µ–Ω—è", callback_data="new_praise"))
    if new_praise != current_text:
        try:
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id,
                                  text=escape_markdown(new_praise),
                                  reply_markup=markup,
                                  parse_mode="MarkdownV2")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Ö–≤–∞–ª—ã: {e}")
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!")


print("–ú–æ–¥—É–ª—å praise –∑–∞–≥—Ä—É–∂–µ–Ω")

# ================== –ú–û–î–£–õ–¨ "–¢–û–ü-5 –£–ß–ê–°–¢–ù–ò–ö–û–í" ==================
USERS_FILE = "biggest_project.json"
try:
    with open(USERS_FILE, "r", encoding="utf-8") as f:
        users = json.load(f)
except (FileNotFoundError, json.JSONDecodeError):
    users = {}


def save_users():
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f, indent=4, ensure_ascii=False)


def top_players_fn(call):
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    current_time = time.time()
    if user_id in user_timers_top and current_time - user_timers_top[user_id] < 10:
        return
    user_timers_top[user_id] = current_time
    if user_id in blacklist:
        return
    top_list = sorted(users.items(), key=lambda x: x[1].get("score", 0), reverse=True)[:5]
    if not top_list:
        bot.send_message(chat_id, "‚ùå –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –Ω–∞–±—Ä–∞–ª –æ—á–∫–æ–≤.")
        bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
        return
    top_text = "üèÜ –¢–æ–ø-5 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:\n\n"
    for i, (uid, data) in enumerate(top_list, start=1):
        name = data.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
        surname = data.get("surname", "")
        score = data.get("score", 0)
        full_name = f"{name} {surname}".strip()
        top_text += f"{i}. {full_name} ‚Äî {score} –±–∞–ª–ª–æ–≤\n"
    bot.send_message(chat_id, top_text)
    bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())


@bot.message_handler(commands=["top"])
def top_players_message(message):
    user_id = message.from_user.id
    current_time = time.time()
    if user_id in user_timers_top and current_time - user_timers_top[user_id] < 10:
        return
    user_timers_top[user_id] = current_time
    if user_id in blacklist:
        return
    top_list = sorted(users.items(), key=lambda x: x[1].get("score", 0), reverse=True)[:5]
    if not top_list:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –Ω–∞–±—Ä–∞–ª –æ—á–∫–æ–≤.")
        return
    top_text = "üèÜ –¢–æ–ø-5 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:\n\n"
    for i, (uid, data) in enumerate(top_list, start=1):
        name = data.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
        surname = data.get("surname", "")
        score = data.get("score", 0)
        full_name = f"{name} {surname}".strip()
        top_text += f"{i}. {full_name} ‚Äî {score} –±–∞–ª–ª–æ–≤\n"
    bot.send_message(message.chat.id, top_text)


# ================== –ú–û–î–£–õ–¨ "FAQ" ==================
CHANNELS_ID_FAQ = -1002476745050  # –£–∫–∞–∂–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ FAQ
faqs = [
    {"title": "–ß—Ç–æ —ç—Ç–æ –∑–∞ –±–æ—Ç?", "message_id": 9},
    {"title": "–ö—Ç–æ —Å–æ–∑–¥–∞–ª —ç—Ç–æ—Ç –±–æ—Ç?", "message_id": 10},
    {"title": "–ù–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–∏—Å–∞–Ω –±–æ—Ç?", "message_id": 11},
    {"title": "–ö–∞–∫ —Å–∫–∞—á–∞—Ç—å –∫–Ω–∏–≥—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞?", "message_id": 12},
    {"title": "–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª IHT Books —Å–≤–æ–∏ –∫–Ω–∏–≥–∏?", "message_id": 13},
    {"title": "–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç?", "message_id": 15},
    {"title": "–ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏?", "message_id": 16},
    {"title": "–ö–∞–∫ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–æ—Ç–∞?", "message_id": 17},
    {"title": "–ú–æ–∂–Ω–æ –ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ?", "message_id": 18},
]


def get_faq_markup(page=0, per_page=7):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è FAQ.
    –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
    """
    markup = types.InlineKeyboardMarkup(row_width=1)
    start = page * per_page
    end = start + per_page
    faqs_on_page = faqs[start:end]
    for faq in faqs_on_page:
        button = types.InlineKeyboardButton(f"üìå {faq['title']}",
                                            callback_data=f"faqitem_{faq['message_id']}")
        markup.add(button)
    if page > 0:
        markup.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"faqprev_{page - 1}"))
    if end < len(faqs):
        markup.add(types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°", callback_data=f"faqnext_{page + 1}"))
    return markup


@bot.message_handler(commands=['faqs'])
def show_faqs(message):
    user_id = message.from_user.id
    current_time = time.time()
    if user_id in user_timers and current_time - user_timers[user_id] < 10:
        return
    user_timers[user_id] = current_time
    if message.from_user.id in blacklist:
        return
    bot.send_message(message.chat.id, "üìö –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:", reply_markup=get_faq_markup())


@bot.callback_query_handler(func=lambda call: call.data.startswith("faqitem_"))
def send_faq(call):
    """
    –ü—Ä–∏ –≤—ã–±–æ—Ä–µ FAQ-–≤–æ–ø—Ä–æ—Å–∞ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞
    —Å –æ—Ç–≤–µ—Ç–æ–º –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    try:
        _, msg_id = call.data.split("_")
        message_id = int(msg_id)
        back_markup = types.InlineKeyboardMarkup(row_width=1)
        back_markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="faq_back"))
        bot.copy_message(chat_id=call.from_user.id,
                         from_chat_id=CHANNELS_ID_FAQ,
                         message_id=message_id,
                         reply_markup=back_markup)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ FAQ-item: {e}")


@bot.callback_query_handler(func=lambda call: call.data.startswith("faqnext_"))
def faq_next(call):
    try:
        page = int(call.data.split("_")[1])
        bot.edit_message_reply_markup(call.message.chat.id,
                                      call.message.message_id,
                                      reply_markup=get_faq_markup(page))
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã FAQ: {e}")


@bot.callback_query_handler(func=lambda call: call.data.startswith("faqprev_"))
def faq_prev(call):
    try:
        page = int(call.data.split("_")[1])
        bot.edit_message_reply_markup(call.message.chat.id,
                                      call.message.message_id,
                                      reply_markup=get_faq_markup(page))
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã FAQ: {e}")


@bot.callback_query_handler(func=lambda call: call.data == "faq_back")
def faq_back(call):
    try:
        chat_id = call.message.chat.id
        bot.delete_message(chat_id, call.message.message_id)
        bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")


# ================== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ==================
def main_menu():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ.
    """
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(types.InlineKeyboardButton("–ò–ò", callback_data="ai"))
    markup.add(types.InlineKeyboardButton("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞", callback_data="library"))
    markup.add(types.InlineKeyboardButton("–ü–æ—Ö–≤–∞–ª–∏ –º–µ–Ω—è", callback_data="praise"))
    markup.add(types.InlineKeyboardButton("–¢–æ–ø-5 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã", callback_data="top_players"))
    markup.add(types.InlineKeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ", callback_data="bot_info"))
    markup.add(types.InlineKeyboardButton("FAQ", callback_data="faq"))
    markup.add(types.InlineKeyboardButton("Help me", callback_data="commands"))
    markup.add(types.InlineKeyboardButton("–ü–æ–ª–∏—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", callback_data="usage_policy"))
    markup.add(types.InlineKeyboardButton("–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞", callback_data="developers"))
    return markup


@bot.message_handler(commands=['menu'])
def start(message):
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:")
    bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())


@bot.callback_query_handler(func=lambda call: call.data in [
    "ai", "library", "praise", "top_players", "bot_info",
    "faq", "commands", "usage_policy", "developers"
])
def main_menu_callback(call):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –ø–æ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é: —É–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –∞ –∑–∞—Ç–µ–º ‚Äì –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    chat_id = call.message.chat.id
    bot.delete_message(chat_id, call.message.message_id)
    if call.data == "ai":
        bot.send_message(chat_id,
                         ai, parse_mode="HTML")
        bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    elif call.data == "library":
        bot.send_message(chat_id, "üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞:")
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É:", reply_markup=get_books_markup())
    elif call.data == "praise":
        praise_text = get_random_praise()
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ü–æ—Ö–≤–∞–ª–∏ –º–µ–Ω—è", callback_data="new_praise"))
        bot.send_message(chat_id, escape_markdown(praise_text), reply_markup=markup, parse_mode="MarkdownV2")
        bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    elif call.data == "top_players":
        top_players_fn(call)
    elif call.data == "bot_info":
        bot.send_message(chat_id, about, parse_mode="HTML")
        bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    elif call.data == "faq":
        bot.send_message(chat_id, "üìö –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:")
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:", reply_markup=get_faq_markup())
    elif call.data == "commands":
        bot.send_message(chat_id, help, parse_mode="HTML")
        bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    elif call.data == "usage_policy":
        bot.send_message(chat_id,
                         policy, parse_mode="HTML")
        bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    elif call.data == "developers":
        bot.send_message(chat_id,
                         devs, parse_mode="HTML")
        bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    else:
        bot.answer_callback_query(call.id)
