#faq.py
from bot_instance import bot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import logging
from ban import blacklist
import time

user_timers = {}
CHANNELS_ID = -1002476745050  # –£–∫–∞–∂–∏ ID —Å–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞

faqs = [
    {"title": "–ß—Ç–æ —ç—Ç–æ –∑–∞ –±–æ—Ç?", "message_id": 9},
    {"title": "–ö—Ç–æ —Å–æ–∑–¥–∞–ª —ç—Ç–æ—Ç –±–æ—Ç?", "message_id": 10},
    {"title": "–ù–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–∏—Å–∞–Ω –±–æ—Ç?", "message_id": 11},
    {"title": "–ö–∞–∫ —Å–∫–∞—á–∞—Ç—å –∫–Ω–∏–≥—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞?", "message_id": 12},
    {"title": "–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª IHT Books —Å–≤–æ–∏ –∫–Ω–∏–≥–∏?", "message_id": 13},
    {"title": "–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç?", "message_id": 15},
    {"title": "–ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏?", "message_id": 16},
    {"title": "–ö–∞–∫ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–æ—Ç–∞?", "message_id": 17},
    {"title": "–ú–æ–∂–Ω–æ –ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ?", "message_id": 18},
]


def get_faq_markup(page=0, per_page=7):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ FAQ."""
    markup = InlineKeyboardMarkup()
    start = page * per_page
    end = start + per_page
    faqs_on_page = faqs[start:end]

    for faq in faqs_on_page:
        markup.add(InlineKeyboardButton(f"üìå {faq['title']}", callback_data=f"faqitem_{faq['message_id']}"))

    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"faqprev_{page - 1}"))
    if end < len(faqs):
        nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°", callback_data=f"faqnext_{page + 1}"))

    if nav_buttons:
        markup.add(*nav_buttons)

    return markup


@bot.message_handler(commands=['faqs'])
def show_faqs(message):
    user_id = message.from_user.id
    current_time = time.time()

    if user_id in user_timers and current_time - user_timers[user_id] < 10:
        return  # –ü—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

    user_timers[user_id] = current_time
    if message.from_user.id in blacklist:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–Ω–µ
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤."""
    bot.send_message(message.chat.id, "üìö –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:", reply_markup=get_faq_markup())


@bot.callback_query_handler(func=lambda call: call.data.startswith("faqitem_"))
def send_faq(call):
    """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ FAQ."""
    try:
        _, msg_id = call.data.split("_")
        message_id = int(msg_id)
        bot.forward_message(call.from_user.id, CHANNELS_ID, message_id)
    except (ValueError, IndexError) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_query: {e}")


@bot.callback_query_handler(func=lambda call: call.data.startswith("faqnext_"))
def next_page(call):
    """–õ–∏—Å—Ç–∞–µ—Ç FAQ –≤–ø–µ—Ä–µ–¥."""
    try:
        page = int(call.data.split("_")[1])
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=get_faq_markup(page))
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã FAQ: {e}")


@bot.callback_query_handler(func=lambda call: call.data.startswith("faqprev_"))
def prev_page(call):
    """–õ–∏—Å—Ç–∞–µ—Ç FAQ –Ω–∞–∑–∞–¥."""
    try:
        page = int(call.data.split("_")[1])
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=get_faq_markup(page))
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã FAQ: {e}")

print("–ú–æ–¥—É–ª—å faq –∑–∞–≥—Ä—É–∂–µ–Ω")