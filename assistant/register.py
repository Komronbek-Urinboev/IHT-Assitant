#register.py

from bot_instance import bot
from db import user_data, users_db, DB_FILE
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
import json
from text import policy
from config import ADMIN_IDS
import time
from ban import blacklist


banned_words = {"–ø–ª–æ—Ö–æ–µ", "—Å–ª–æ–≤–æ", "–ø—Ä–∏–º–µ—Ä", "—Ö—É–π", "—á–ª–µ–Ω", "–ø–∏–¥—Ä", "—Å—É–∫–∞"
,"—Å–æ—Å–∏", ".", "west", "niggers", "–µ–±–∞–ª", "—Å—É—á–∫–∞", "–¥–µ–±–∏–ª", "jnerfnroimeo", "jjjsewd", "assets", "assets154"
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
def contains_banned_word(text):
    text = text.lower()  # –ü—Ä–∏–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    for word in banned_words:
        if word in text:
            return True
    return False
user_timers = {}
# –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
PREMIUM_ONLY_SYMBOLS = ["üåü", "üë®‚Äçüíª"]
def contains_premium_symbols(text):
    return any(symbol in text for symbol in PREMIUM_ONLY_SYMBOLS)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏–º–µ–Ω–∏
def ask_name(message):
    if contains_premium_symbols(message.text):
        bot.send_message(message.chat.id, "–≠—Ç–æ—Ç —Å–∏–º–≤–æ–ª üåü üë®‚Äçüíª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        return
    if contains_banned_word(message.text):
        bot.send_message(message.chat.id, "–í–∞—à–µ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –Ω–∞ 10 –º–∏–Ω—É—Ç.")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π (ID —á–∞—Ç–æ–≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø < -1000000000000)
        if message.chat.type in ["supergroup", "group"]:
            bot.restrict_chat_member(message.chat.id, message.from_user.id, until_date=time.time() + 600)
        return
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    bot.register_next_step_handler(message, ask_surname)


# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Ñ–∞–º–∏–ª–∏–∏
def ask_surname(message):
    if contains_premium_symbols(message.text):
        bot.send_message(message.chat.id, "–≠—Ç–æ—Ç —Å–∏–º–≤–æ–ª üåüüë®‚Äçüíª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        return
    if contains_banned_word(message.text):
        bot.send_message(message.chat.id, "–í–∞—à–µ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –Ω–∞ 10 –º–∏–Ω—É—Ç.")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π (ID —á–∞—Ç–æ–≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø < -1000000000000)
        if message.chat.type in ["supergroup", "group"]:
            bot.restrict_chat_member(message.chat.id, message.from_user.id, until_date=time.time() + 600)
        return
    user_data[str(message.chat.id)] = {"name": message.text}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    bot.register_next_step_handler(message, ask_group)


# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –≥—Ä—É–ø–ø—ã
def ask_group(message):
    if contains_premium_symbols(message.text):
        bot.send_message(message.chat.id,
                         "–≠—Ç–æ—Ç —Å–∏–º–≤–æ–ª üåü –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        return
    user_data[str(message.chat.id)]["surname"] = message.text  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–º–∏–ª–∏–∏

    groups = ["1-–¢–ù-1", "1-–¢–ù-2", "1-–¢–ù-3", "1-–¢–ù-4", "1-–ê–§-1", "1-–ê–§-2", "1-–°–ì-1", "1-–í–¢–ù-1", "2-–¢–ù-1", "2-–¢–ù-2", "2-–¢–ù-3", "2-–°–ì-1", "2-–ê–§-1", "2-–ê–§-2", "2-–ú–¢–ù-1", "2-–ú–°–ì-1", "2-–í–¢–ù-1","2-–í–¢–ù-2","2-–í–°–ì-3","2-–í–°–ì-4",]
    group_markup = ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    for i in range(0, len(groups), 2):  # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ 2 –≤ —Ä—è–¥
        group_markup.row(*[KeyboardButton(g) for g in groups[i:i + 2]])

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —É—á–µ–±–Ω—É—é –≥—Ä—É–ø–ø—É:", reply_markup=group_markup)
    bot.register_next_step_handler(message, lambda msg: validate_group(msg, groups))


def validate_group(message, groups):
    if message.text not in groups:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return ask_group(message)
    user_data[str(message.chat.id)]["group"] = message.text
    ask_in_group(message)


def ask_in_group(message):
    if contains_premium_symbols(message.text):
        bot.send_message(message.chat.id,
                         "–≠—Ç–æ—Ç —Å–∏–º–≤–æ–ª üåüüë®‚Äçüíª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        return

    subgroups = ["–ê", "–í"]
    subgroup_markup = ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    subgroup_markup.add(KeyboardButton("–ê"), KeyboardButton("–í"))

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –ø–æ–¥–≥—Ä—É–ø–ø—É:", reply_markup=subgroup_markup)
    bot.register_next_step_handler(message, lambda msg: validate_subgroup(msg, subgroups))


def validate_subgroup(message, subgroups):
    if message.text not in subgroups:
        bot.send_message(message.chat.id,
                         "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–≥—Ä—É–ø–ø—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return ask_in_group(message)
    user_data[str(message.chat.id)]["subgroup"] = message.text

    hide_markup = ReplyKeyboardRemove()
    bot.send_message(message.chat.id, "–ï—â—ë —á—É—Ç—å-—á—É—Ç—å –æ—Å—Ç–∞–ª–æ—Å—å...", reply_markup=hide_markup)
    ask_room(message)


# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–º–Ω–∞—Ç—ã
def ask_room(message):
    if contains_premium_symbols(message.text):
        bot.send_message(message.chat.id,
                         "–≠—Ç–æ—Ç —Å–∏–º–≤–æ–ª üåüüë®‚Äçüíª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        return
    if contains_banned_word(message.text):
        bot.send_message(message.chat.id, "–í–∞—à–µ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –Ω–∞ 10 –º–∏–Ω—É—Ç.")

        if message.chat.type in ["supergroup", "group"]:
            bot.restrict_chat_member(message.chat.id, message.from_user.id, until_date=time.time() + 600)
        return

    user_data[str(message.chat.id)]["in_group"] = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∫–æ–º–Ω–∞—Ç—ã (–≥–¥–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç —É –≤–∞—Å –∫—É—Ä–∞—Ç–æ—Ä—Å–∫–∏–π —á–∞—Å?):")
    bot.register_next_step_handler(message, save_room)


# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –∫–æ–º–Ω–∞—Ç—ã
def save_room(message):
    user_data[str(message.chat.id)]["room"] = message.text
    save_user_data(message)


# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def save_user_data(message):
    telegram_id = str(message.chat.id)
    user_data[telegram_id]["telegram_id"] = telegram_id
    user_data[telegram_id]["username"] = message.chat.username if message.chat.username else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

    users_db[telegram_id] = user_data[telegram_id]

    with open(DB_FILE, "w", encoding="utf-8") as f:
        json.dump(users_db, f, indent=4, ensure_ascii=False)

    send_data_to_admin(user_data[telegram_id])

    bot.send_message(
        message.chat.id,
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /about.",
        reply_markup=ReplyKeyboardRemove()
    )

    user_data.pop(telegram_id, None)  # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö


def send_data_to_admin(user_info):
    admin_message = (
        f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:\n"
        f"–ò–º—è: <code>{user_info['name']}</code>\n"
        f"–§–∞–º–∏–ª–∏—è: <code>{user_info['surname']}</code>\n"
        f"–ì—Ä—É–ø–ø–∞: <code>{user_info['group']}</code>\n"
        f"–ü–æ–¥–≥—Ä—É–ø–ø–∞: <code>{user_info['subgroup']}</code>\n"  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        f"–ö–æ–º–Ω–∞—Ç–∞: <code>{user_info['room']}</code>\n"
        f"Telegram ID: <code>{user_info['telegram_id']}</code>\n"
        f"Username: @{user_info['username']}\n"
    )
    for admin_id in ADMIN_IDS:
        bot.send_message(admin_id, admin_message, parse_mode="HTML")


def send_existing_data(message, user_info):
    existing_message = (
        f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–æ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
        f"–ò–º—è: <code>{user_info.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</code>\n"
        f"–§–∞–º–∏–ª–∏—è: <code>{user_info.get('surname', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</code>\n"
        f"–ì—Ä—É–ø–ø–∞: <code>{user_info.get('group', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</code>\n"
        f"–ü–æ–¥–≥—Ä—É–ø–ø–∞: <code>{user_info.get('subgroup', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</code>\n"
        f"–ö–æ–º–Ω–∞—Ç–∞: <code>{user_info.get('room', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</code>\n"
        f"Telegram ID: <code>{user_info.get('telegram_id', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</code>\n"
        f"Username: @{user_info.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    )
    bot.send_message(message.chat.id, existing_message, parse_mode="HTML")
    bot.send_message(message.chat.id, f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu - –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ì–ª–∞–≤–Ω–æ–≥–æ –ú–µ–Ω—é")
    bot.send_message(message.chat.id, "–°–¥–µ–ª–∞–ª–∏ –æ—à–∏–±–∫—É –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏? \n–°–æ–æ–±—â–∏—Ç–µ –Ω–∞–º /admin")
    bot.send_message(message.chat.id, "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /about.")


# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start_registration(message):
    user_id = message.from_user.id
    current_time = time.time()

    if user_id in user_timers and current_time - user_timers[user_id] < 10:
        return  # –ü—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

    user_timers[user_id] = current_time
    if message.from_user.id in blacklist:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–Ω–µ
    telegram_id = str(message.chat.id)

    if telegram_id in users_db:
        send_existing_data(message, users_db[telegram_id])
        return

    user_data[telegram_id] = {
        "telegram_id": telegram_id,
        "name": None,
        "surname": None,
        "group": None,
        "in_group": None,
        "room": None,
        "phone": None,
        "username": message.chat.username if message.chat.username else "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
    }
    bot.send_message(message.chat.id, f"–° –º–æ–º–µ–Ω—Ç–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏ –Ω–∞—á–∞–ª–∞ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º</b> –∏ <b>–ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</b>. –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∏–º–∏ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –æ–∑–Ω–∞—á–∞–µ—Ç –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å–æ –≤—Å–µ–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏. \n\n{policy}", parse_mode='HTML')
    bot.send_message(
        message.chat.id,
        f"–ü—Ä–∏–≤–µ—Ç, <i>{message.chat.first_name}</i>!\n\n"
        f"–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ–¥—ë–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –±–æ—Ç.",
        parse_mode='HTML'
    )
    ask_name(message)
